class Theme {
  constructor() {

  }

  init() {
    this.initMobileNavigation();
    this.initCaseStudySlider();
    this.initReviewsSlider();
    this.initMigrationSelector();
    this.initMigrationSlider();
    this.initMigrationAccordion();
    this.initBrandDropdown();
    this.initHomeWareTextilesPage();
  }

  initBrandDropdown() {
    const brandOverlay = document.querySelector('.BrandDropdown');
    if (brandOverlay) {

      // isMobile Catch
      var isMobile = {
        Android: () => { return navigator.userAgent.match(/Android/i); },
        BlackBerry: () => { return navigator.userAgent.match(/BlackBerry/i); },
        iOS: () => { return navigator.userAgent.match(/iPhone|iPad|iPod/i); },
        Opera: () => { return navigator.userAgent.match(/Opera Mini/i); },
        Windows:  () => { return navigator.userAgent.match(/IEMobile/i); },
        any: () => { return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows()); }
      };

      // Hover Effects
      let brandsWrap = document.querySelector('.BrandDropdown > .BrandsWrapper');

      brandsWrap.addEventListener('mouseover', (event) => {
        let hoveredTarget = event.target;
        if (hoveredTarget.matches('.brand')) {
          let dataTarget = hoveredTarget.dataset.target;
          let bgImage = document.querySelector('.BrandImage[data-hover="' + dataTarget + '"]');
          if (bgImage) {
            bgImage.classList.add('visible');
          }
        }
      });
      brandsWrap.addEventListener('mouseout', (event) => {
        let hoveredTarget = event.target;
        if (hoveredTarget.matches('.brand')) {
          let dataTarget = hoveredTarget.dataset.target;
          let bgImage = document.querySelector('.BrandImage[data-hover="' + dataTarget + '"]');
          if (bgImage && !hoveredTarget.classList.contains('active')) {
            bgImage.classList.remove('visible');
          }
        }
      });

      // Category Filter Functions
      // Get Category list and create an Array
      const getCategoryList = () => {
        let brandSelector = document.querySelectorAll('.BrandsWrapper .brand');
        let category = Array.from(brandSelector, (e) => e.dataset.category);
        return category;
      };

      // Remove duplicates from the Array
      const removeDuplicates = (arr) => {
        let unique_array = [];
        for (var i = 0; i < arr.length; i++) {
          if (unique_array.indexOf(arr[i]) == -1) {
            unique_array.push(arr[i]);
          }
        }
        return unique_array
      }

      // Build UL/LI
      function makeUL(array) {
        var list = document.createElement('ul');
        for (var i = 0; i < array.length; i++) {
          var item = document.createElement('li');
          item.appendChild(document.createTextNode(array[i]));
          item.setAttribute('data-category', array[i]);
          item.classList.add('FilterBtn');
          list.appendChild(item);
        }
        return list;
      }
      // Build Select/Option
      function makeSelect(array) {
        var list = document.createElement('select');
        for (var i = 0; i < array.length; i++) {
          var item = document.createElement('option');
          item.appendChild(document.createTextNode(array[i]));
          item.setAttribute('data-category', array[i]);
          list.appendChild(item);
        }
        return list;
      }
      // Not Function
      function not(selector, filter) {
        try {
          return document.querySelectorAll(selector + ":not(" + filter + ")");
        } catch (e) {
          console.log("something goes wrong");
          return null;
        }
      }
      // New Array without duplicates
      const newArraylist = removeDuplicates(getCategoryList());

      // For Mobile, build a select with the new Array
      if (isMobile.any()) {
        let filteredList = document.getElementById('FilteredList');
        filteredList.appendChild(makeSelect(newArraylist));

        let filterSelect = document.querySelector('#FilteredList select');
        let option = document.createElement('option');
        let optTxt = document.createTextNode('Filter By');
        let selected = true;
        let disabled = true;
        option.appendChild(optTxt);
        option.selected = selected;
        option.disabled = disabled;

        filterSelect.insertBefore(option, filterSelect.firstChild);

        // Mobile Filter Functions
        filterSelect.addEventListener('change', (event) => {
          let targetVal = event.target.value;
          let brand = document.querySelectorAll('.brand');

          if(targetVal == 'All') {
            brand.velocity({opacity: 0}, {display: 'none'}, {duration: 500});
            not('.brand', '.category-all').velocity({opacity: 0.5}, {display: 'block'}, {duration: 500});
          } else {
            brand.velocity({opacity: 0}, {display: 'none'}, {duration: 500});
            document.querySelectorAll('.brand[data-category="' + targetVal + '"]').velocity({opacity: 0.5}, {display: 'block'}, {duration: 500});
          }
        });
      } else {
        // Build Ul for Desktop
        let filteredList = document.getElementById('FilteredList');
        filteredList.appendChild(makeUL(newArraylist));
        let filterBtn = document.querySelector('#FilteredList ul');

        filterBtn.addEventListener('click', (e) => {
          if (e.target.className === 'FilterBtn') {
            let category = e.target.dataset.category;
            let brand = document.querySelectorAll('.brand');

            if (category == "All") {
              brand.velocity({opacity: 0}, {display: 'none'}, {duration: 500});
              not('.brand', '.category-all').velocity({opacity: 0.5}, {display: 'block'}, {duration: 500});
            } else {
              brand.velocity({opacity: 0}, {display: 'none'}, {duration: 500});
              document.querySelectorAll('.brand[data-category="' + category + '"]').velocity({opacity: 0.5}, {display: 'block'}, {duration: 500});
            }
          }
        });
      }
    }
  }

  initCaseStudySlider() {
    $('.CaseStudy__challenge__slider__container--2').slick({
      slidesToShow: 1,
      centerPadding: ($('.CaseStudy__challenge__slider__container--2').find('.test').outerWidth() / 2) + 'px',
      variableWidth: true,
      nextArrow: '.CaseStudy__challenge__right-arrow',
      prevArrow: '.CaseStudy__challenge__left-arrow',
      responsive: [
      {
        breakpoint:768,
        settings:{
          centerMode: true,

        }
      }]
    });
  }

  initMigrationSelector() {
    if($('.migrationGeneralPages').length > 0){
      $('.Migrated__large__custom').click(function(){
        $('.Migrated__active').removeClass('Migrated__active')
        $(this).addClass('Migrated__active');
        let img = $(this).clone();
        $('.js-logo-container').html(img);
        $('.js-hidden').slideDown('slow');
      });
    }
  }

  initMigrationSlider() {
    if($('.MigrationPages').length >0 || $('.migrationGeneralPages').length > 0){
    var $status = $('.MigrationSlider__count');
    var $slickElement = $('.MigrationSlider__row');

    $slickElement.on('init reInit afterChange', function(event, slick, currentSlide, nextSlide){
        //currentSlide is undefined on init -- set it to 0 in this case (currentSlide is 0 based)
        var i = (currentSlide ? currentSlide : 0) + 1;
        $status.text(i + '/' + slick.slideCount);
    });

    $('.MigrationSlider__row').slick({
        nextArrow: '.MigrationSlider__left',
        prevArrow: '.MigrationSlider__right',
        adaptiveHeight: true
    });
  }
  }
  initMigrationAccordion(){
    if($('.MigrationPages').length >0 || $('.migrationGeneralPages').length > 0){
    $(function() {
      // (Optional) Active an item if it has the class "is-active"
      $(".js-accordion > .js-accordion-container.is-active")
        .children(".js-accordion-body")
        .slideDown();

      $(".js-accordion > .js-accordion-container").click(function() {
        // Cancel the siblings
        $(this)
          .siblings(".js-accordion-container")
          .removeClass("is-active")
          .children(".js-accordion-body")
          .slideUp();
        // Toggle the item
        $(this)
          .toggleClass("is-active")
          .children(".js-accordion-body")
          .slideToggle("ease-out");
      });
    });
  }
  }
  initMobileNavigation() {
    let mobileTrigger = document.querySelector('#MobileNavTrigger');
    let header = document.querySelector('.MainHeader');
    mobileTrigger.addEventListener('click', (e) => {
      if (mobileTrigger.classList.contains('is-open')) {
        mobileTrigger.classList.remove('is-open');
        mobileTrigger.classList.add('is-closed');
        header.classList.remove('nav-is-open');
      } else {
        mobileTrigger.classList.remove('is-closed');
        mobileTrigger.classList.add('is-open');
        header.classList.add('nav-is-open');
      }
    });
  }
  initReviewsSlider() {
    const ReviewsSlider = $('.js-ReviewsSlider');
    const slideTime = 6000; //10 seconds
    const incrementInterval = 10 //1 second change bar value
    const changePercentage = (incrementInterval / slideTime) * 100;

    if ($(window).width() < 1000) {
      var buttonSet = $('.js-ReviewsSlider__button');;
    } else {
      var buttonSet = $('.js-ReviewsSliderController__button');;
    }

    function changeReviewBackground(url) {
      const reviewBackground = $('.js-ReviewBlogContainerBackground');
      const reviewBackgroundAlt = $('.js-ReviewBlogContainerBackgroundAlt');
      if (reviewBackground.data('turn') < reviewBackgroundAlt.data('turn')) {
        reviewBackground.css('background-image', `url("${url}")`);
        reviewBackgroundAlt.css('opacity', 0);
        reviewBackground.data('turn', 1);
        reviewBackgroundAlt.data('turn', 0);
      } else {
        reviewBackgroundAlt.css('background-image', `url("${url}")`);
        reviewBackgroundAlt.css('opacity', 1);
        reviewBackground.data('turn', 0);
        reviewBackgroundAlt.data('turn', 1);
      }
    }

    function reverseWidthTimer(currentSlide) {
      //Reset All Button Widths to 0
      $(buttonSet).each((index, button) => {
        $(button).find('.js-ReviewsSlider__timer').width(0);
      });

      let currentButton = buttonSet[currentSlide];
      const currentButtonTimer = $(currentButton).find('.js-ReviewsSlider__timer');
      let timer = setInterval(() => {
        var currentPercentage = currentButtonTimer.width() / currentButtonTimer.parent().width() * 100;
        currentButtonTimer.width((currentPercentage + changePercentage) + '%');
      }, incrementInterval);

      setTimeout(() => {
        currentButtonTimer.width(0);
        clearInterval(timer);
      }, slideTime + 1000);

      $('.js-ReviewsSliderController__button').unbind('click');
      $('.js-ReviewsSliderController__button').click(function(){
        currentButtonTimer.width(0);
        clearInterval(timer);
      });
      buttonSet.each(function(i, button) {
        $(this).on('click', () => {
          ReviewsSlider.slick('slickGoTo', i);
        });
      });

      $(ReviewsSlider).on('swipe', () => {
        console.log('swiped');
        currentButtonTimer.width(0);
        clearInterval(timer);
      });
    }

    if (ReviewsSlider.length > 0) { //If slider exists initialize
      ReviewsSlider.on('init', function(slick) {
        let currentButton = buttonSet[0];
        changeReviewBackground($(currentButton).data('bg'));
        reverseWidthTimer(0);
      });

      ReviewsSlider.on('afterChange', function(event, slick, currentSlide, nextSlide) {
        reverseWidthTimer(currentSlide);
      });

      ReviewsSlider.on('beforeChange', function(event, slick, currentSlide, nextSlide) {
        let nextButton = buttonSet[nextSlide];
        //changeReviewBackground($(nextButton).data('bg'));
      });

      ReviewsSlider.slick({
        arrows: false,
        fade: true,
        autoplay: true,
        pauseOnHover: false,
        autoplaySpeed: slideTime + 1000,
        responsive: [{
          breakpoint: 1000,
          settings: {
            slidesToShow: 1,
            centerMode: false
          }
        }]
      });


    }
  }
  initHomeWareTextilesPage(){
    if(window.location.pathname == '/homeware-textiles'){
      let companies = [];
      let company = '';
      //Get Company Data
      <% dato.homeware_textile_companies.each_with_index do |company, index| %>
        <% next if index < 2 %>
        company = `
          <%= partial '/partials/homeware-textiles/homeware-case-study',locals: { company: company} %>
        `
        companies.push(company);
      <% end %>

      console.log(companies);
      $('.js-loadButton').click(function(){
        let startIndex = $(this).data('start');
        let endIndex = startIndex + 2;
        console.log(startIndex);
        console.log(endIndex);

        console.log(companies);
        companies.forEach((company, index) => {

          if(index >= startIndex && index <= endIndex){
            $('.js-companyList').append(company);
            $(this).data('start', endIndex);
          }
          if(index >= companies.length - 1){
            $(this).remove();
          }
        });
      });
    }
  }
}


const Parkfield = new Theme();
Parkfield.init();
